;;;;   Sails is a way to generate dynamic components for web pages, often called 'widgets'
;;;;   in other systems.  Sails uses the Model-View-Controller software design pattern
;;;;   The sails infrastructure is lightweight, only providing common methods
;;;;   for manipulating HTML components.  These common features are the abilities to:
;;;;      *insert raw HTML from a component into a document (see MANIFEST-SAIL, )
;;;;      *include other components within a component
;;;;      *assign names to significant HTML elements within the component (e.g. title, author-link)

(in-package :sails)

;; Sails currently uses Parenscript and the Parenscript Object System to represent sail
;; objects.

(defvar *sails-document* nil)

(defclass sails-document (event-emitter)
  ((focus :accessor saildoc-focus :initform nil)
   (all-sail-css :accessor saildoc-css :initform "")
   (loadedp :accessor saildoc-loadedp :initform nil))
  (:documentation "For stuff."))

(defun saildoc-apply-css (saildoc)
  (let* ((ss (or (@ saildoc 'ss)
                 (methcall 'js-global::create-element js-global::document "style")))
         (css (saildoc-css saildoc))
         (head-elem (elt (methcall 'js-global::get-elements-by-tag-name js-global:document "head") 0)))
    (methcall 'js-global::set-attribute ss "type" "text/css")
    
    (if (slot-value ss 'js-global::style-sheet)
        (progn
          (setf (slot-value ss 'js-global::style-sheet 'js-global::css-text) css))
        (progn
          (methcall 'js-global::append-child ss
                    (methcall 'js-global::create-text-node js-global::document css))))

    (methcall 'js-global::append-child head-elem ss)
    (setf (@ saildoc 'ss) ss)))

(defmethod saildoc-onload ((saildoc sails-document))
  (setf (saildoc-loadedp saildoc) t)
  ;; append all the CSS for all the defail forms
  (saildoc-apply-css saildoc))

(register-dom-event-handler js-global:document
			    "domready"
			    (lambda (ev) 
                              #+nil
                              (pslog "loaded sails.")
                              (saildoc-onload *sails-document*)))

(defun append-sail-css (css-string)
  "Given a string (of CSS), appends the given CSS to the CSS that needs to be applied
when the page loads."
  (setf (saildoc-css *sails-document*)
	(+ (saildoc-css *sails-document*) "
" css-string))
  ;; css will be added to document automatically onload.  but if that
  ;; has already happened re-apply the CSS
  (when (saildoc-loadedp *sails-document*)
    (saildoc-apply-css *sails-document*))

  (return (saildoc-css *sails-document*)))

(defclass standard-sail ()
  ((view :initarg :view :accessor sail-view)
   (sub :initarg :sub :accessor sail-sub)
   (fieldmap :initarg :fields :initform nil :accessor sail-fieldmap
             :documentation "Used to fill in the fields of a sail at
             fill-in-content-time initargs")
   (supersail :initarg :supersail :accessor sail-supersail)
   (supersail-group :initarg :supersail-group :accessor sail-supersail-group))
  (:documentation "This is the superclass of all sails."))

(defclass sail-view ()
  ()
  (:documentation "The sail object responsible for rendering information on the page.  This
is used internally and "))

(defclass html-sail-view (sail-view) ())

(defclass dom-inspired-event (event)
  ((dom-origin :initarg :dom-origin :accessor event-dom-origin)))

(defclass sail-inspired-event (event)
  ((sail :initarg :sail-origin :accessor event-sail-origin)))

(defmethod initialize-instance ((sail standard-sail))
  ;(log "Initializing standard sail.")
  ;(log sail)
  (setf (sail-sub sail) (create))
  (call-next-method))

(defgeneric add-subsail (sail standard-sail &key group position)
  (:documentation "Adds a subcomponent to a given sail.  Right now this can only be called
after the sail has rendered.  group-name indicates the name of the group of subcomponents
to which we are adding this subsail."))

(defgeneric remove-from-supersail (sail)
  (:documentation "Removes SAIL from its PARENT-SAIL and from the DOM."))

(defgeneric manifest-sail (sail writer)
  (:documentation "Writes a sail's html to the page.  WRITER is a function that takes an
HTML string as its only argument and purportedly writes HTML to a document."))

(defgeneric generate-html (sail)
  (:documentation "Returns an HTML string for the given sail."))

(defgeneric post-render (sail)
  (:documentation "Called once the sail has been inserted into the DOM of the page."))

(defmethod event-fired ((sail standard-sail) ev)
  (call-next-method)
  (let ((parent (sail-supersail sail)))
    (when parent  
      (event-fired parent ev))))

(defmethod post-render ((sail standard-sail)))

(defun insert-by-group-name (sail group-name raw-html)
  (let ((group-obj (slot-value sail 'view 'dom group-name)))
    (unless group-obj
      (pslog (:error "Sail %o does not have field named %s") sail group-name)
      #+nil
      (throw (+ "Sail does not have a group named " group-name)))
    (elem-insert group-obj raw-html :top)))


;  (new (global::-insertion.-top (slot-value sail 'view 'dom group-name) raw-html)))
;  (new (global::-insertion.-top (slot-value sail 'view 'dom group-name) raw-html)))
;  (let ((group-elem (slot-value sail.view.dom group-name)))

(defun establish-group (sail name &key sorter)
  (let ((group (array)))
    (when sorter (setf (slot-value group 'sorter) sorter))
    (setf (slot-value sail 'sub name) group)
    (return group)))

(defmethod remove-dom-nodes ((sail standard-sail))
  (let ((root-elems (sail-root-elements sail)))
    (dolist (elem root-elems)
      (remove-elem elem))))

(defmethod remove-from-supersail ((sail standard-sail))
  ;; 1. remove all of the DOM nodes from the document
  (remove-dom-nodes sail)
  ;; 2. remove ourselves from the parent subsails
  (remove-from-array (slot-value (sail-supersail sail)
				 'sub
				 (sail-supersail-group sail))
		     sail)
  ;; 3. Update slots to reflect changes
  (setf (sail-supersail sail) nil)
  (setf (sail-supersail-group sail) nil))
  

(defmethod add-subsail ((parent-sail standard-sail)
                        (subsail standard-sail)
			&key
			(group "children")
			(position :bottom))
  ;; position is ignored
;  (log (+ "add-subsail group: " group))
;  (log "Parent-sail:")
;  (log parent-sail)
  (let* ((group-name group)
	 (group
	  (defaultf (slot-value parent-sail 'sub group-name) (array))))

    (setf (sail-supersail subsail) parent-sail)
    (setf (sail-supersail-group subsail) group-name)
    (methcall 'js-global::splice
	      group
	      (if (=== :top position)
		  0
		  (length group))
	      0
	      subsail)
    (when (slot-value group 'sorter)
      (methcall 'jsns::sort group (slot-value group 'sorter)))

    ;; insert the html as appropriate depending on where in the group it is being added
    (let ((insert-index (methcall 'jsns::index-of group subsail))
	  (html-writer nil))
;      (log (+ "Insert index: " insert-index " vs. group length: " (length group)))
      (cond
	((== (slot-value group 'jsns::length) 1)
	 (setf html-writer
	       (lambda (raw-html)
		 (insert-by-group-name parent-sail group-name raw-html))))
	((==  0 insert-index)
	 (setf html-writer
	       (lambda (raw-html)
		 (elem-insert (sail-first-node (slot-value (aref group 1) 'view)) raw-html :before))))
	(t
	 (setf html-writer
	       (lambda (raw-html)
;		 (log group)
		 (elem-insert (sail-last-node (slot-value (aref group (- insert-index 1)) 'view)) raw-html :after)))))
      
      (manifest-sail subsail html-writer)
      (return subsail))))

(defmethod manifest-sail ((sail standard-sail) writer)
  (render-html (slot-value sail 'view) writer)
  (post-render sail)
  (fill-with-content sail)
;  (paren-psos::log "MAnifest sail returning!")
  (return sail))

(defmethod initialize-instance ((view html-sail-view))
  ;(log "INITIALIZED HTML SAIL VIEW")
  (setf (slot-value view 'dom) (create))
  (setf (slot-value view 'dom-info) (create))
  (call-next-method))

(defmethod render-html ((view html-sail-view) writer doc)
  (writer (generate-html view)))

(defmethod render-html :after ((view html-sail-view) writer &optional (doc document))
  (setf (slot-value view 'dom) (locate-dom-nodes view doc)) )

(defun fill-with-content (sail)
  ""
;  (paren-psos::log "Fill sail with content.")
  (let ((initarg-map (class-initarg-map (class-of sail))))

;    (pslog (slot-value sail 'view 'dom-info))

    (let ((fieldmap (slot-value sail 'fieldmap)))
      (when fieldmap
        (for-in (field-name fieldmap)
          (let ((val (slot-value fieldmap field-name)))
            (when val
              (cond
                ((paren-psos::is-subclass-of standard-sail (class-of val))
                 (add-subsail sail val :group field-name))
                ((arrayp val)
                 (dolist (subsail val)
                   (add-subsail sail subsail :group field-name)))
                (t
                 (setf-field (sail)
                             field-name val))))))))))

(defun set-field-inner-html (sail field-name html-contents)
  "Sets the HTML of the field named by FIELD-NAME in an instance of a sail."
;  (paren-psos::log (+ "set-field-inner-html Field : " field-name " DOM: " (slot-value sail 'view 'dom field-name) ", Value: " html-contents))
  (setf (slot-value sail 'view 'dom field-name 'jsns::inner-h-t-m-l) html-contents))

(defun sail-last-node (view) 
  (return (slot-value view 'last)))

(defun sail-first-node (view)
  (return (slot-value view 'first)))

(defmethod locate-dom-nodes ((view html-sail-view) doc)
  (let ((rv (create)))
    (for-in (field-name (slot-value view 'dom-info))
      (let* ((info (slot-value view 'dom-info field-name))
	     (elem (methcall 'jsns::get-element-by-id doc (slot-value info 'id)))
	     (first? (slot-value info 'first))
	     (last? (slot-value info 'last)))
        (unless elem
          (pslog (:error "Sail %o failed to locate its domnode %o") view field-name))
        (setf (slot-value rv field-name) elem)
        (when first? (setf (slot-value view 'first) elem))
        (when last? (setf (slot-value view 'last) elem))))
    (return rv)))
  
(defvar *id-counter* 0
  "Each field is assigned a unique id.  This numeric counter ensures unique ID assignment.")

(defun gen-field-id (&optional (name "anon"))
  (let ((num (incf *id-counter*)))
    (return (+ name num))))

(defun def-field (view name &optional (key-obj (create)))
  "Called within render-html to generate an id for a field and also declare relevant information
about that field.  We may rethink this when sail generation is integrated with the metaobject protocol."
;  (log view)
  (let* ((first (slot-value key-obj :first))
	 (last (slot-value key-obj :last))
	 (id (slot-value key-obj :id))
	 (info (setf (slot-value view 'dom-info name) (create))))
    (setf (slot-value info 'id) (or id (gen-field-id name)))
    (when first
      (setf (slot-value info 'first) t))
    (when last
      (setf (slot-value info 'last) t))
    (return (slot-value info 'id))))

;;; Hiding/Showing
(defun sibling-nodes-between (node1 node2)
  "Returns an array of DOM nodes between two nodes, including each of them."
  (let ((rv (array node1)))
    (while (!= node1 node2)
      (let ((next-node (slot-value node1 'jsns::next-sibling)))
	(when (== nil next-node)
	  (break))
	(methcall 'jsns::push rv next-node)
	(setf node1 next-node)))
    (return rv)))

(defmethod sail-root-elements ((sail standard-sail))
  (let ((res (array))
	(first (sail-first-node (slot-value sail 'view)))
	(last (sail-last-node (slot-value sail 'view))))
    (dolist (sibling (sibling-nodes-between first last))
      (when (== 1 (slot-value sibling 'jsns::node-type))
	(methcall :push res sibling)))
    (return res)))

(defmethod make-sail-visible ((sail standard-sail))
  (dolist (sibling-node (sail-root-elements sail))
    (setf (slot-value sibling-node 'jsns::style 'jsns::visibility) "visible")))

(defmethod hide-sail ((sail standard-sail))
  (dolist (sibling-node (sail-root-elements sail))
    (elem-hide sibling-node)))

(defmethod show-sail ((sail standard-sail))
  (dolist (sibling-node (sail-root-elements sail))
    (elem-show sibling-node)))

(defmethod sail-field ((sail standard-sail) field-name)
  (let ((elem (slot-value sail 'view 'dom field-name)))
    (unless elem
      #+nil
      (pslog (:error "Sail %o does not have field named %s") sail field-name)
      #+nil
      (throw (+ "Sail does not have field named " field-name)))
    (return elem)))

(defmethod sail-subsails ((sail standard-sail) &optional (group-name "children"))
  (return (copy-array (or (slot-value sail 'sub group-name) (array)))))

;;; Sails Document Model
(defmethod initialize-instance ((doc sails-document))
  (call-next-method)
  (defaultf (slot-value doc :focus) nil))

(setf *sails-document* (new (sails-document)))

(defgeneric on-focus (sail event)
  (:documentation "Called when the given sail is focussed."))

(defgeneric on-blur (sail event)
  (:documentation "Called when the given sail loses focus."))

(defmethod on-focus (empty event))
(defmethod on-blur (empty event))

(defun focus-sail (sail)
  (when (slot-value *sails-document* :focus)
    (on-blur (slot-value *sails-document* :focus) nil))
  (setf (slot-value *sails-document* :focus) sail)
  (when sail
    (on-focus sail nil)))

