;   Sails is a way to generate dynamic components for web pages, often called 'widgets'
;   in other systems.  Sails uses the Model-View-Controller software design pattern
;   to describe components, and is a system comparable to the dojo framework without
;   trying to be everything to everybody.

; Sails currently uses Parenscript and the Parenscript Object System to represent sail
; objects.

;   MVC is an elusive term.  Here are some helpful pages:
;      http://www.enode.com/x/markup/tutorial/mvc.html  -- has a neat diagram
;      http://ootips.org/mvc-pattern.html -- consolidation of newsgroup posts
;      http://c2.com/cgi/wiki?ModelViewController -- WikiWikiWeb discussion
   
;   The provided sails infrastructure is lightweight, only providing common methods for manipulating
;   HTML components.  These common features are the abilities to:
;      *insert raw HTML from a component into a document
;      *include other components within a component
;      *assign names to significant HTML elements within the component (e.g. title, authorlink)

;(defpackage sails
;  (:use "suavescript" "javascript" "")
;  )

;(in-package "sails")

(defvar sails (create))

(defclass sail-controller ()
  ()
  (:documentation "Replaces Sail.Controller"))

(defgeneric add-subsail (sail sail-controller)
  (:documentation "Adds a subcomponent to a given sail.  Right now this can only be called
after the sail has rendered.  group-name indicates the name of the group of subcomponents
to which we are adding this subsail."))

(defgeneric parent-sail (sail)
  (:documentation "Returns the parent sail of the given sail."))

(defgeneric add-subsail (parent-sail sail &optional group-name)
  (:documentation "Adds SAIL to PARENT-SAIL, attaching to the dom at the field given
by GROUP-NAME."))

(defgeneric generate-html (sail)
  (:documentation "Returns an HTML string for the given sail."))

(defmethod parent-sail ((sail sail-controller))
  (return sail.parent-sail))

(defmethod add-subsail ((parent-sail sail-controller)
                        (subsail sail-controller)
			&optional (group-name "children"))
  (let ((group
	 (defaultf (slot-value parent-sail.sub group-name) (array)))
	(insert-index (group.index-of subsail))
	(html-writer
	 (if (== group.length 1)
	     (lambda (raw-html) (insert-by-group-name sail
						      group-name
						      raw-html))
	     (if (== insert-index 0)
		 (lambda (raw-html)
		   (new (-insertion.-before (sail-first-node
					     (sail-view
					      (aref group 1)))
					    raw-html)))
		 (lambda (raw-html)
		   (new (-insertion.-after (sail-last-node
					    (sail-view
					     (aref group (- insert-index 1))))
					   raw-html)))))))
    (setf subsail.parent-sail parent-sail)
    (group.push subsail)
    (group.sort group.sorter)
    (manifest-sail subsail html-writer)))

(defmethod manifest-sail ((sail sail-controller) writer)
  "Writes a sail's html to the page.  WRITER is a function that takes an HTML string as
its only argument and purportedly writes HTML to a document."
  (render-html sail.view writer))

(defclass sail-view ()
  ()
  (:documentation "The sail object responsible for rendering information on the page."))


(defclass html-sail-view (sail-view) ())

(defmethod initialize-instance ((view html-sail-view))
  (call-next-method)
  (setf view.dom (create))
  (setf view.dom-info (create)))

(defmethod render-html ((view html-sail-view) writer doc)
  (writer (generate-html view)))

(defmethod render-html :after ((view html-sail-view) writer &optional (doc document))
  (setf view.dom-info (locate-dom-nodes doc))
  (post-render v

(defmethod locate-dom-nodes ((view html-sail-view) doc)
  (let ((rv (create)))
    (doeach (field-name view.dom-info)
      (setf (slot-value rv field-name)
	    (doc.get-element-by-id
             ; view.dom-info[field-name].id
	     (slot-value (slot-value view.dom-info 
				     field-name)
			 'id))))
    (return rv)))
  
(defvar sails-id-counter 0)
(defun2 gen-field-id (&optional (name "anon"))
  (let ((num (incf sails-id-counter)))
    (return (+ name num))))

(defun2 def-field (view name &key first last id)
  "Called within render-html to generate an id for a field and also declare relevant information
about that field.  We may rethink this when sail generation is integrated with the metaobject protocol."
  (let ((info (setf (slot-value view.dom-info name) (create))))
    (setf info.id (or id (gen-field-id name)))
    (when first
      (setf info.first t))
    (when last
      (setf info.first t))
    (return info.id)))